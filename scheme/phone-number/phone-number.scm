(import (rnrs))

(define (digit? char)
  (define digits (string->list "0123456789"))
  (fold-right (lambda (x y) (or x y))
	  #f
	  (map (lambda (digit)
		 (char=? digit char))
	       digits)))

(define (clear-signs phone-number-list)
  (if (null? phone-number-list)
      '()
      (if (digit? (car phone-number-list))
	  (cons (car phone-number-list)
		(clear-signs (cdr phone-number-list)))
	  (clear-signs (cdr phone-number-list)))))
(define (check-codes digits10)
  (let ((area1 (car digits10))
	(exchange1 (cadddr digits10)))
     (if (not (or (char=? area1 #\0)
	       (char=? area1 #\1)
	       (char=? exchange1 #\0)
	       (char=? exchange1 #\1)))
	 (list->string digits10)
	 (error "Wrong codes"))))

(define (clean phone-number)
  (let ((phone-digits (clear-signs (string->list phone-number))))
    (if (= (length phone-digits) 11)
	(if (char=? (car phone-digits) #\1)
	    (check-codes (cdr phone-digits))
	    (error "International code"))
	(if (= (length phone-digits) 10)
	    (check-codes phone-digits)
	    (error "Wrong length" phone-digits)))))
